IMPLEMENTATION GUIDE FOR PROMPT ENHANCEMENT SYSTEM

This guide provides detailed instructions for implementing the enhanced prompt system in your application.

SYSTEM ARCHITECTURE

1. Core Components:
   - Format Detection Module: Identifies text format using pattern recognition
   - Platform Analysis Module: Determines platform context and requirements
   - Enhancement Engine: Processes text while preserving format
   - Post-Processing Module: Ensures format integrity in final output

2. Processing Flow:
   - Input Text → Format Detection → Platform Analysis → Mode Selection → 
     Enhancement Processing → Format Preservation → Post-Processing → Enhanced Output

3. Mode Selection Logic:
   - General Mode: Default for most text enhancement needs
   - Agent Mode: Activated for AI system instructions or coding tasks
   - Answer Mode: Activated when input contains clear questions

INTEGRATION INSTRUCTIONS

1. System Prompt Implementation:
   - Load the main system prompt (enhanced-system-prompt.txt) as the base instruction set
   - Append the appropriate mode-specific prompt based on detected mode
   - Include format detection guide as reference knowledge
   - Include platform optimization guide as reference knowledge

2. API Implementation:
   ```javascript
   async function enhanceText(text, mode = 'auto', options = {}) {
     // Detect format if not specified
     const format = options.format || detectTextFormat(text);
     
     // Detect platform if not specified
     const platform = options.platform || detectPlatform(text);
     
     // Determine enhancement mode if set to auto
     const enhancementMode = mode === 'auto' ? determineMode(text) : mode;
     
     // Load appropriate prompts
     const systemPrompt = loadSystemPrompt();
     const modePrompt = loadModePrompt(enhancementMode);
     
     // Construct final prompt with format and platform information
     const finalPrompt = constructPrompt(systemPrompt, modePrompt, format, platform);
     
     // Process enhancement request
     const enhancedText = await processEnhancement(text, finalPrompt);
     
     // Post-process to ensure format preservation
     return postProcessEnhancement(enhancedText, format, platform, text);
   }
   ```

3. Format Detection Implementation:
   ```javascript
   function detectTextFormat(text) {
     // Initialize format detection scores
     const scores = {
       email: 0,
       code: 0,
       list: 0,
       chat: 0,
       thread: 0,
       table: 0,
       json: 0,
       message: 0
     };
     
     // Check email indicators
     if (/^(From|To|Subject|Date|Cc|Bcc):\s/m.test(text)) scores.email += 3;
     if (/\n(Regards|Sincerely|Best|Thank you),/m.test(text)) scores.email += 2;
     if (/[\w.-]+@[\w-]+\.[\w.-]+/.test(text)) scores.email += 1;
     
     // Check code indicators
     if (/```[\w]*\n[\s\S]*?\n```|`[^`]+`/.test(text)) scores.code += 3;
     const codeKeywords = text.match(/\b(function|class|const|let|var|import|export|if|else|for|while|return|try|catch)\b/g);
     if (codeKeywords && codeKeywords.length >= 3) scores.code += 2;
     
     // Check list indicators
     if (/^\s*[-*•]\s+.+$(\n\s*[-*•]\s+.+$)+/m.test(text)) scores.list += 2;
     if (/^\s*\d+\.\s+.+$(\n\s*\d+\.\s+.+$)+/m.test(text)) scores.list += 2;
     
     // Check chat indicators
     if (/^\s*[\w\s]+:\s*.+$(\n\s*[\w\s]+:\s*.+$)+/m.test(text)) scores.chat += 2;
     
     // Check thread indicators
     if (/^\s*>\s*.+$(\n\s*>\s*.+$)*/m.test(text)) scores.thread += 2;
     
     // Check table indicators
     if (/\|[^\|]+\|[^\|]+\|/.test(text)) scores.table += 2;
     
     // Check JSON indicators
     if (/\{[\s\S]*"[\w]+"\s*:\s*[\s\S]*\}/.test(text)) scores.json += 3;
     
     // Default to message for short text
     if (text.length < 500) scores.message += 1;
     
     // Return format with highest score
     return Object.entries(scores).sort((a, b) => b[1] - a[1])[0][0];
   }
   ```

4. Mode Determination Implementation:
   ```javascript
   function determineMode(text) {
     // Check for agent mode indicators
     if (/\b(function|class|code|program|algorithm|implement)\b/i.test(text) ||
         /```[\w]*\n[\s\S]*?\n```/.test(text)) {
       return 'agent';
     }
     
     // Check for answer mode indicators
     if (/\b(what|how|why|when|where|who|which|can you|could you|explain)\b.*\?/.test(text)) {
       return 'answer';
     }
     
     // Default to general mode
     return 'general';
   }
   ```

5. Post-Processing Implementation:
   ```javascript
   function postProcessEnhancement(enhancedText, format, platform, originalText) {
     // Format-specific processing
     switch (format) {
       case 'email':
         return preserveEmailFormat(enhancedText, originalText);
       case 'code':
         return preserveCodeFormat(enhancedText, originalText);
       case 'list':
         return preserveListFormat(enhancedText, originalText);
       case 'chat':
         return preserveChatFormat(enhancedText, originalText);
       case 'thread':
         return preserveThreadFormat(enhancedText, originalText);
       case 'table':
         return preserveTableFormat(enhancedText, originalText);
       case 'json':
         return preserveJsonFormat(enhancedText, originalText);
       default:
         return preserveMessageFormat(enhancedText, originalText);
     }
   }
   ```

PERFORMANCE OPTIMIZATION

1. Caching Strategy:
   - Implement LRU cache for similar enhancement requests
   - Cache format detection results for repeated text patterns
   - Use incremental processing for large text blocks

2. Parallel Processing:
   - Run format detection and platform analysis in parallel
   - Process multiple enhancement requests concurrently
   - Implement batch processing for multiple texts

3. Resource Management:
   - Implement timeout handling for enhancement requests
   - Add graceful degradation for complex format detection
   - Optimize prompt length to minimize token usage

TESTING AND VALIDATION

1. Format Preservation Tests:
   - Create test suite with examples of each format
   - Verify structural elements are maintained after enhancement
   - Test edge cases with mixed formats

2. Enhancement Quality Tests:
   - Measure improvement in clarity, precision, and effectiveness
   - Validate against human-enhanced reference examples
   - Test across different domains and content types

3. Performance Benchmarks:
   - Measure processing time across different text lengths
   - Test throughput for batch processing
   - Measure token usage efficiency

DEPLOYMENT RECOMMENDATIONS

1. Phased Rollout:
   - Deploy general mode first as baseline
   - Add agent and answer modes after validation
   - Gradually increase complexity of format detection

2. Monitoring:
   - Track format detection accuracy
   - Monitor enhancement quality metrics
   - Measure user satisfaction and engagement

3. Continuous Improvement:
   - Collect examples of format detection failures
   - Gather user feedback on enhancement quality
   - Regularly update prompts based on performance data
